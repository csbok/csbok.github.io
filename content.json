{"pages":[],"posts":[{"title":"CSS로 Layout 구성하기","text":"스튜디오밀의 영상을 보면서 정리한 내용이다. css의 display 속성display: block (div, section)개행처리됨. 부모에게 꽉 참. 박스모델이라 너비 높이 지정 가능 display: inline (a, span, img)개행처리 안됨. 일반 텍스트 처럼 취급됨. 너비랑 높이 설정 불가 display:inline-blockinline처럼 일반 글자처럼 취급 되나 (바로 옆에 다른 항목이 붙을 수 있다)너비와 높이를 지정 가능하다. display: none메뉴 같은걸 숨길때 유용함 CSS Box Modelbox-sizing: content-box (기본값)실제 컨텐츠 기준으로 크기를 설정한다. padding과 border, margin값은 이 컨텐츠 사이즈 외에 추가로 더 붙게 된다. box-sizing: border-boxpadding과 border까지가 너비 및 높이에 포함된다. 고려할게 적어지므로 더 쉽게 사용 가능하지만, IE구버전 지원이 안되므로 잘 고려해봐야한다. 예제 페이지2단 레이아웃을 위해 html구조를 아래와 같이 만든다.inline-block을 사용하는 방식과, float, 마지막으로 반응형을 위한 css가 있으니 link태그를 바꿔서 각각 css로 확인한다. 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=3.0\"&gt; &lt;title&gt;CSS Layout&lt;/title&gt; &lt;link href=\"inline-block.css\" rel=\"stylesheet\"&gt; &lt;!-- &lt;link href=\"float.css\" rel=\"stylesheet\"&gt; --&gt; &lt;!-- &lt;link href=\"respon.css\" rel=\"stylesheet\"&gt; --&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;section class=\"item item-a\"&gt; &lt;h1&gt;section A&lt;/h1&gt; &lt;p&gt; Section A Content&lt;br/&gt; Section A Content&lt;br/&gt; Section A Content&lt;br/&gt; Section A Content&lt;br/&gt; Section A Content&lt;br/&gt; Section A Content &lt;/p&gt; &lt;/section&gt; &lt;section class=\"item item-b\"&gt; &lt;h1&gt;section B&lt;/h1&gt; &lt;p&gt; Section B Content&lt;br/&gt; Section B Content&lt;br/&gt; Section B Content&lt;br/&gt; Section B Content&lt;br/&gt; Section B Content&lt;br/&gt; Section B Content &lt;/p&gt; &lt;/section&gt; &lt;/div&gt; &lt;footer&gt;footer&lt;/footer&gt; &lt;/body&gt;&lt;/html&gt; inline-block.css1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556body &#123; margin: 0; font-size: 2em;&#125;h1, p &#123; margin: 0;&#125;.container &#123; max-width: 1024px; /*margin-left: auto; margin-right: auto;*/ margin: 0 auto; background:pink;&#125;.container:after &#123; clear:both; display:block; content:'';/* height: 0; visibility: hidden;*/&#125;.item &#123; display:inline-block; vertical-align: top; padding: 5%; font-size: 1rem; float:left; &#125;.item-a &#123; width:30%; background-color: yellow;&#125;.item-b &#123; width:50%; background-color: green;&#125;div &#123; background-color:red;&#125;span &#123; background-color:blue;&#125;footer &#123; clear: both; background: gray;&#125; float.css123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657body &#123; margin: 0; font-size: 1em;&#125;h1, p &#123; margin: 0;&#125;.container &#123; /* font-size:0; */ max-width: 1024px; /*margin-left: auto; margin-right: auto;*/ margin: 0 auto; background:pink;&#125;.container:after &#123; clear:both; display:block; content:'';/* height: 0; visibility: hidden;*/&#125;.item &#123; /* display:inline-block; vertical-align: top; */ padding: 5%; /* font-size: 1rem; */ float:left; &#125;.item-a &#123; width:30%; background-color: yellow;&#125;.item-b &#123; width:50%; background-color: green;&#125;div &#123; background-color:red;&#125;span &#123; background-color:blue;&#125;footer &#123; clear: both; background: gray;&#125; respon.css1234567891011121314151617181920212223242526272829303132333435363738394041body &#123; margin: 0; font-size: 1em;&#125;h1, p &#123; margin: 0;&#125;.container &#123; background: pink;&#125;.item &#123; padding: 5%;&#125;.item-a &#123; background-color: yellow;&#125;.item-b &#123; background-color: yellowgreen;&#125;@media screen and (min-width: 700px) &#123; .container &#123; font-size: 0; &#125; .item &#123; display:inline-block; vertical-align: top; font-size: 1rem; &#125; .item-a &#123; width: 30%; &#125; .item-b &#123; width:50%; &#125;&#125;","link":"/2019/03/07/css-layout/"},{"title":"expo-react-native-unimodules","text":"Expo기존에는 expo-cli를 통해서 생성한 React Native 앱만 expo sdk를 사용할 수 있었다.장점은 expo가 정제한 네이티브 모듈을 쉽게 갖다 쓸수 있다는 점이였지만, 모든 네이티브 모듈을 포함하고 있어서 용량이 큰게 단점이였다. 그런데 이 단점을 어느정도 해소시켜줄 unimodules이 나왔다. 네이티브 모듈을 위한 코드가 Expo의 자산인지라, flutter가 나왔을때 React Native를 위해 만든 네이티브 모듈 코드를 재사용하기 위해 Unimodules가 만들어진것으로 보이며 이를 이용하여 expo-cli로 만들지 않은 일반 React Native 앱에서도 필요한 네이티브 모듈만 따로 설치하여 Expo SDK를 사용할 수 있게되었다.(이를 bare 방식이라 부른다. 기존처럼 expo 앱에 올릴수 있는건 managed 방식이라 부른다.) 리액트 네이티브에서 지원되는 유니모듈 리스트https://docs.expo.io/versions/v32.0.0/bare/unimodules-full-list/ 12345678# expo cli 설치npm i -g expo-cli# react-native-cli 설치npm i -g react-native-cli# expo sdk를 선택해서 추가할수 있는 보일러 플레이트로 프로젝트 생성expo init --template bare-minimum 이후 프로젝트 폴더로 이동한 후 필요한 expo 모듈을 설치한다. expo-sqlite1234npm install expo-sqlite# 이 패키지도 설치해줘야 expo-sqlite가 정상 작동한다. 삽질을 하게 만든놈.npm install lodash.zipobject 이후 App.js 를 아래와 같이 수정한다. (expo-sqlite의 예제를 bare로 import하게 변경)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168mport React from 'react';import &#123; StyleSheet, Text, View, TextInput, TouchableOpacity &#125; from 'react-native';import &#123; SQLite &#125; from 'expo-sqlite';import &#123; Asset, Constants, FileSystem, Permissions &#125; from 'react-native-unimodules';const db = SQLite.openDatabase('db.db');class Items extends React.Component &#123; state = &#123; items: null &#125;; componentDidMount() &#123; this.update(); &#125; render() &#123; const &#123; done: doneHeading &#125; = this.props; const &#123; items &#125; = this.state; const heading = doneHeading ? 'Completed' : 'Todo'; if (items === null || items.length === 0) &#123; return null; &#125; return ( &lt;View style=&#123;&#123; marginBottom: 16, marginHorizontal: 16 &#125;&#125;&gt; &lt;Text style=&#123;styles.sectionHeading&#125;&gt;&#123;heading&#125;&lt;/Text&gt; &#123;items.map((&#123; id, done, value &#125;) =&gt; ( &lt;TouchableOpacity key=&#123;id&#125; onPress=&#123;() =&gt; this.props.onPressItem &amp;&amp; this.props.onPressItem(id)&#125; style=&#123;&#123; backgroundColor: done ? '#1c9963' : '#fff', borderColor: '#000', borderWidth: 1, padding: 8 &#125;&#125;&gt; &lt;Text style=&#123;&#123; color: done ? '#fff' : '#000' &#125;&#125;&gt;&#123;value&#125;&lt;/Text&gt; &lt;/TouchableOpacity&gt; ))&#125; &lt;/View&gt; ); &#125; update() &#123; db.transaction(tx =&gt; &#123; tx.executeSql( `select * from items where done = ?;`, [this.props.done ? 1 : 0], (_, &#123; rows: &#123; _array &#125; &#125;) =&gt; this.setState(&#123; items: _array &#125;) ); &#125;); &#125;&#125;export default class App extends React.Component &#123; state = &#123; text: null &#125;; componentDidMount() &#123; db.transaction(tx =&gt; &#123; tx.executeSql( 'create table if not exists items (id integer primary key not null, done int, value text);' ); &#125;); &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.heading&#125;&gt;SQLite Example&lt;/Text&gt; &lt;View style=&#123;styles.flexRow&#125;&gt; &lt;TextInput style=&#123;styles.input&#125; placeholder=\"what do you need to do?\" value=&#123;this.state.text&#125; onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125; onSubmitEditing=&#123;() =&gt; &#123; this.add(this.state.text); this.setState(&#123; text: null &#125;); &#125;&#125; /&gt; &lt;/View&gt; &lt;View style=&#123;styles.listArea&#125;&gt; &lt;Items done=&#123;false&#125; ref=&#123;todo =&gt; (this.todo = todo)&#125; onPressItem=&#123;id =&gt; db.transaction( tx =&gt; &#123; tx.executeSql(`update items set done = 1 where id = ?;`, [id]); &#125;, null, this.update )&#125; /&gt; &lt;Items done=&#123;true&#125; ref=&#123;done =&gt; (this.done = done)&#125; onPressItem=&#123;id =&gt; db.transaction( tx =&gt; &#123; tx.executeSql(`delete from items where id = ?;`, [id]); &#125;, null, this.update )&#125; /&gt; &lt;/View&gt; &lt;/View&gt; ); &#125; add(text) &#123; db.transaction( tx =&gt; &#123; tx.executeSql('insert into items (done, value) values (0, ?)', [text]); tx.executeSql('select * from items', [], (_, &#123; rows &#125;) =&gt; console.log(JSON.stringify(rows)) ); &#125;, null, this.update ); &#125; update = () =&gt; &#123; this.todo &amp;&amp; this.todo.update(); this.done &amp;&amp; this.done.update(); &#125;;&#125;const styles = StyleSheet.create(&#123; container: &#123; backgroundColor: '#fff', flex: 1, paddingTop: Constants.statusBarHeight, &#125;, heading: &#123; fontSize: 20, fontWeight: 'bold', textAlign: 'center' &#125;, flexRow: &#123; flexDirection: 'row' &#125;, input: &#123; borderColor: '#4630eb', borderRadius: 4, borderWidth: 1, flex: 1, height: 48, margin: 16, padding: 5 &#125;, listArea: &#123; backgroundColor: '#f0f0f0', flex: 1, paddingTop: 16 &#125;, sectionHeading: &#123; fontSize: 18, marginBottom: 8 &#125;,&#125;); 출처 : https://raw.githubusercontent.com/expo/sqlite-example/master/App.js 이후 iOS를 실행하기 위해선 pod install을 해줘야한다. (unimodules 관련 패키지가 깔리는게 보인다)1234cd iospod installcd ..npm run ios 안드로이드의 경우 MainApplication에 SQLitePackate()를 포함시켜줘야한다.123456import expo.modules.sqlite.SQLitePackage;private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(Arrays.asList( // Your other packages will be here new SQLitePackage()), Arrays.asList()); expo-web-browser1npm install expo-web-browser 마찬가지로 모듈 설치 후 MainApplication을 수정한다. 123456import expo.modules.webbrowser.WebBrowserPackage;private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(Arrays.asList( // Your other packages will be here new WebBrowserPackage()), Arrays.asList()); 하지만 안드로이드의 경우 에러메시지를 내면서 빌드가 되지 않는다. 에러메시지를 자세히 보면12345678Caused by: com.android.builder.dexing.DexArchiveBuilderException: Error while dexing.The dependency contains Java 8 bytecode. Please enable desugaring by adding the following to build.gradleandroid &#123; compileOptions &#123; sourceCompatibility 1.8 targetCompatibility 1.8 &#125;&#125; 위와 같은 내용이 나오므로, app/build.gradle 위의 compileOptions를 추가하도록 하자.그러면 빌드 에러나는것도 해결이 된다. 출처 https://blog.expo.io/you-can-now-use-expo-apis-in-any-react-native-app-7c3a93041331 https://docs.expo.io/versions/v32.0.0/bare/hello-world/","link":"/2019/03/19/expo-react-native-unimodules/"},{"title":"storybook","text":"기본 설정1npm init 프로젝트를 먼저 생성한 후, storybook와 react패키지등을 설치한다. 1234npm i --save-dev @storybook/reactnpm i --save react react-domnpm i --save-dev @babel/corenpm i --save-dev babel-loader package.json 에 실행을 위한 명령어를 추가한다.12345&#123; \"scripts\": &#123; \"storybook\": \"start-storybook -p 9001 -c .storybook\" &#125;&#125; .storybook/config.js 파일을 아래와 같이 작성한다. (디렉토리가 없을경우 생성해준다)12345import &#123; configure &#125; from '@storybook/react'; function loadStories() &#123; require('../stories/index.js'); // You can require as many stories as you need.&#125; configure(loadStories, module); stories/index.js 파일을 아래와 같이 작성한다. (디렉토리가 없을 경우 생성해준다)1234567891011import React from 'react'; import &#123; storiesOf &#125; from '@storybook/react'; import &#123; Button &#125; from '@storybook/react/demo'; storiesOf('Button', module) .add('with text', () =&gt; ( &lt;Button&gt;Hello Button&lt;/Button&gt; )) .add('with some emoji', () =&gt; ( &lt;Button&gt;&lt;span role=\"img\" aria-label=\"so cool\"&gt;😀 😎 👍 💯&lt;/span&gt;&lt;/Button&gt; )); 이후1npm run storybook 을 통해 실항할 수 있다.출처 : https://storybook.js.org/docs/basics/guide-react/ 액션 애드온 사용하기1npm i -D @storybook/addon-actions 애드온을 설치해 준 후 .storybook/addons.js 파일을 아래와 같이 작성한다.1import '@storybook/addon-actions/register'; 이후 아래와 같이 스토리보드에서 onClick에 action을 사용하면 스토리보드의 액션창에서 로그를 볼 수 있다.12345678import &#123; storiesOf &#125; from '@storybook/react';import &#123; action, configureActions &#125; from '@storybook/addon-actions'; import Button from './button'; storiesOf('Button', module).add('default view', () =&gt; ( &lt;Button onClick=&#123;action('button-click')&#125;&gt;Hello World!&lt;/Button&gt;)); 출처 : https://hyunseob.github.io/2018/01/08/storybook-beginners-guide/ styled-jsx 사용하기styled-jsx를 직접 사용하는 방법으론 성공하지 못했다.1npm install next 다만 위의 명령어와 같이 next.js 를 설치하면 내장된 styled-jsx를 사용할 수 있다.next.js만 설치한 후 아래와 같이 컴포넌트를 만들면 바로 스토리북에서도 볼 수 있다.1234567891011121314import React from 'react' const Card = (props) =&gt; ( &lt;&gt; &lt;div className=\"item\" &#123;...props&#125;&gt;aaaa&lt;/div&gt; &lt;style jsx&gt;&#123;` .item &#123; background:pink; &#125; `&#125;&lt;/style&gt; &lt;/&gt;) export default Card 설치하면 작업하기 좋은 VSCode Extension vscode-styled-jsx styled-jsx Language Server (scss버전도 별도로 있음) CreateReactApp 으로 만든 프로젝트에 적용CRA 버전2를 기준으로 생성되있는 프로젝트에 스토리북을 붙이려면12npm i --save-dev @storybook/reactnpm i -D @storybook/addon-actions 만 설치해주면 된다.styled-jsx나 babel등은 이미 다 설치가 되있으므로, 위의 두 패키지만 설치하고,순서대로 필요한 파일들을 생성해주면 기존 CRA 2.x 프로젝트에 스토리북을 적용할수 있다.","link":"/2019/03/07/storybook/"}],"tags":[],"categories":[]}